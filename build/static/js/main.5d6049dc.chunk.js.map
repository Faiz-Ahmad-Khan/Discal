{"version":3,"sources":["logo.svg","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calculator","props","handleDiscount","e","setState","discount","target","value","calculate","console","log","state","handleTax","tax","costs","newCosts","bind","sum1","this","forEach","x","parseInt","NaN","discountedPrice","effectiveCosts","map","el","index","costPercent","Math","round","netCost","splice","sum2","xs","style","fontFamily","fontSize","fontWeight","fontStyle","color","marginLeft","className","cost","key","bottom","type","placeholder","size","onChange","handleChange1","length","disabled","onClick","handleRemove1","addClick1","textAlign","marginTop","name","xsOffset","parseFloat","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d6049dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Row, Col, Grid } from 'react-flexbox-grid'\n\n// var person = {\n//   firstName: 'Faiz',\n//   lastName: 'Khan',\n//   fullName: function (){\n//     return this.firstName + \" \" + this.lastName\n//   }\n//   }\n//   console.log(person.fullName())\nexport class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      costs: [''],\n      discount: '',\n      tax: '',\n      newCosts: [null],\n    };\n    this.calculate = this.calculate.bind(this);\n  }\n\n\n  calculate(e) {\n\n    let sum1 = 0;\n    //console.log(this.state)\n    this.state.costs.forEach((x) => sum1 += x ? parseInt(x) : 0)\n\n    //console.log(sum1);\n\n    if (sum1 === NaN) {\n      return\n    }\n\n    var discountedPrice = (parseInt(sum1) - parseInt(this.state.discount || 0)) + parseInt(this.state.tax || 0);//100 - 30 = 70\n    console.log(discountedPrice)\n    // let costPercent;\n    // let netCost;\n    let effectiveCosts = this.state.costs.map(function (el, index) {\n\n      let costPercent = (el / sum1) * 100\n      console.log(Math.round(costPercent))\n      let netCost = (costPercent / 100) * discountedPrice\n      console.log(Math.round(netCost))\n\n      return Math.round(netCost)\n    });\n\n    this.setState({\n      newCosts: effectiveCosts\n    })\n\n  }\n\n  handleDiscount = (e) => {\n    this.setState(\n      {\n        discount: e.target.value\n      },\n      () => { this.calculate(); console.log(this.state.discount) }\n    )\n\n  }\n  handleTax = (e) => {\n    this.setState(\n      {\n        tax: e.target.value\n      },\n      () => { this.calculate(); console.log(this.state.tax) }\n    )\n\n  }\n\n\n  addClick1() {\n    this.setState(\n      { costs: [...this.state.costs, ''] }\n    )\n  }\n  handleChange1(e, index) {\n    this.state.costs[index] = e.target.value\n    this.setState({ costs: this.state.costs },\n      () => { this.calculate(); }\n    )\n\n  }\n  handleRemove1(e, index) {\n    this.state.costs.splice(index, 1)\n\n    console.log(this.state.costs, \"$$$$\");\n\n    this.setState({ costs: this.state.costs },\n      () => { this.calculate(); }\n    )\n  }\n\n  render() {\n    let sum1 = 0;\n    let sum2 = 0;\n    let newCosts = this.state.newCosts;\n    return (\n      <div>\n        <Grid>\n          <Row>\n            <Col xs={12}>\n              <h1 style={{ fontFamily: 'Open Sans', fontSize: '48px', fontWeight: 'bold' }}>Discal\n              <span style={{ fontFamily: 'Open Sans', fontSize: '15px', fontWeight: 'normal', fontStyle: 'italic', color: 'green', marginLeft: '10px' }}>Helps to find the discounted price</span>\n              </h1>\n            </Col>\n            <Col xs={6} className='verticalLine'>\n              <Row>\n                <Col xs={12}><h2 className='columnFont'>Items</h2></Col>\n              </Row>\n              {\n                this.state.costs.map((cost, index) => {\n\n                  return (\n                    <Row key={index} bottom='xs'>\n                      <Col xs={4}><input type=\"text\" placeholder={'Item Name'} className='calcInput' /></Col>\n                      <Col xs={4}><input type=\"number\" placeholder={'Enter Amount:'} size=\"20\" onChange={(e) => this.handleChange1(e, index)} value={cost} className='calcInput rupee' /></Col>\n                      <Col xs={4}>\n                        {(this.state.costs.length === 1)\n                          ? <button disabled={true} onClick={(e) => this.handleRemove1(e)} className='deleteButtons disabledButtons' >Delete</button>\n                          : <button onClick={(e) => this.handleRemove1(e, index)} className='deleteButtons' >Delete</button>}\n                      </Col>\n                    </Row>\n                  )\n                }\n                )\n              }\n              <Row>\n                <Col xs={3}><button onClick={(e) => this.addClick1(e)} className='addNewButtons' >Add More</button></Col>\n                <Col xs={5}><p style={{textAlign: 'left', fontSize: '30px', fontWeight: 'bold', marginTop: '60px'}}>Total Amount:</p></Col>\n                <Col xs={4}><h1 name='total' className='calcInput columnFont totalRupee'>{parseInt(this.state.costs) && parseInt(this.state.costs.map(x => sum1 += x ? parseInt(x) : 0)) && parseInt(sum1) || 0}</h1></Col>\n              </Row>\n            </Col>\n            <Col xs={5} xsOffset={1}>\n              <Row>\n                <Col xs={12}><h2 className='columnFont'>Effective Price</h2></Col>\n              </Row>\n              {\n                newCosts.map((cost, index) => {\n                  return (\n                    <Row key={index}>\n                      <Col xs={8}><h1 name='effectivePrice' className='calcInput columnFont effectivePrice'>{parseFloat(cost) || 0}</h1></Col>\n                    </Row>\n                  )\n                })\n              }\n              <Row>\n                <Col xs={8}><p style={{textAlign: 'left', fontSize: '30px', fontWeight: 'bold', marginTop: '35px'}}>Total Effective Price:</p></Col>\n                <Col xs={4}><h1 name='effectivePrice' className='calcInput columnFont effectivePrice'>{parseInt(newCosts) && parseInt(newCosts.map(x => sum2 += x ? parseInt(x) : 0)) && parseInt(sum2) || 0}</h1></Col>\n              </Row>\n            </Col>\n            <Col xs={12}>\n              <Row>\n                <Col xs={12}>\n                 <Row>\n                  <Col xs={3}><h2 className='columnFont'>Total Discount:</h2></Col>\n                  <Col xs={3}><input type=\"number\" placeholder='Enter Discount Amount' value={this.state.discount} name=\"discount\" onChange={this.handleDiscount} className='discountInput rupee' /></Col>\n                </Row>\n                <Row>\n                  <Col xs={3}><h2 className='columnFont'>Total Tax:</h2></Col>\n                  <Col xs={3}><input type=\"number\" placeholder='Enter Tax Amount' value={this.state.tax} name=\"tax\" onChange={this.handleTax} className='taxInput rupee' /></Col>\n                </Row>\n                <Row>\n                  <Col xs={3}><h2 style={{textAlign: 'left', fontSize: '30px', fontWeight: 'bold', marginTop: '35px'}}>Total Amount Paid:</h2></Col>\n                  <Col xs={3}><h1 name='discountedPrice' className='calcInput columnFont discountedPrice'>{(parseInt(sum1) - parseInt(this.state.discount || 0)) + parseInt(this.state.tax || 0)}</h1></Col>\n                </Row>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Grid>\n        <div className='footer'>Created by - Faiz Ahmad Khan</div>\n      </div>\n    );\n  }\n}\n\n//<h1>{parseInt(this.state.costs) && parseInt(this.state.costs.map(x => sum1 += parseInt(x))) && parseInt(sum1)}</h1>","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Calculator} from './Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}