{"version":3,"sources":["logo.svg","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calculator","props","handleDiscount","e","setState","discount","target","value","calculate","handleTax","tax","state","costs","newCosts","bind","sum1","this","map","x","parseInt","NaN","discountedPrice","effectiveCosts","el","index","costPercent","splice","console","log","xs","style","fontFamily","fontSize","fontWeight","className","cost","key","bottom","placeholder","onChange","handleChange1","length","disabled","onClick","handleRemove1","addClick1","xsOffset","type","name","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.397f5a82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Row, Col, Grid } from 'react-flexbox-grid'\n\n// var person = {\n//   firstName: 'Faiz',\n//   lastName: 'Khan',\n//   fullName: function (){\n//     return this.firstName + \" \" + this.lastName\n//   }\n//   }\n//   console.log(person.fullName())\nexport class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      costs: [''],\n      discount: '',\n      tax: '',\n      newCosts: [null],\n    };\n    this.calculate = this.calculate.bind(this);\n  }\n\n\n  calculate(e) {\n\n    let sum1 = 0;\n    //console.log(this.state)\n    this.state.costs.map((x) => sum1 += parseInt(x))\n\n    //console.log(sum1);\n\n    if (sum1 === NaN) {\n      return\n    }\n\n    var discountedPrice = (parseInt(sum1) - parseInt(this.state.discount || 0)) + parseInt(this.state.tax || 0);//100 - 30 = 70\n\n    // let costPercent;\n    // let netCost;\n    let effectiveCosts = this.state.costs.map(function (el, index) {\n\n      let costPercent = (parseInt(el) / parseInt(sum1)) * 100\n      let netCost = (parseInt(costPercent) / 100) * parseInt(discountedPrice)\n\n      return netCost\n    });\n\n    this.setState({\n      newCosts: effectiveCosts\n    })\n\n  }\n\n  handleDiscount = (e) => {\n    this.setState(\n      {\n        discount: e.target.value\n      },\n      () => { this.calculate(); }\n    )\n  }\n  handleTax = (e) => {\n    this.setState(\n      {\n        tax: e.target.value\n      },\n      () => { this.calculate(); }\n    )\n  }\n\n\n  addClick1() {\n    this.setState(\n      { costs: [...this.state.costs, \"\"] }\n    )\n  }\n  handleChange1(e, index) {\n    this.state.costs[index] = e.target.value\n    this.setState({ costs: this.state.costs },\n      () => { this.calculate(); }\n    )\n\n  }\n  handleRemove1(index) {\n    this.state.costs.splice(index, 1)\n\n    console.log(this.state.costs, \"$$$$\");\n\n    this.setState({ costs: this.state.costs },\n      () => { this.calculate(); }\n    )\n  }\n\n  render() {\n    let sum1 = 0;\n    let newCosts = this.state.newCosts;\n    return (\n      <div>\n        <Grid>\n          <Row>\n            <Col xs={12}>\n              <h1 style={{ fontFamily: 'Open Sans', fontSize: '48px', fontWeight: 'bold' }}>Discal</h1>\n            </Col>\n            <Col xs={6} className='verticalLine'>\n              <Row>\n                <Col xs={12}><h2 className='columnFont'>Items</h2></Col>\n              </Row>\n              {\n                this.state.costs.map((cost, index) => {\n\n                  return (\n                    <Row key={index} bottom='xs'>\n                      <Col xs={8}><input placeholder={'Item' + \" \" + (index + 1)} onChange={(e) => this.handleChange1(e, index)} value={cost} className='calcInput' /></Col>\n                      <Col xs={4}>\n                        {(this.state.costs.length === 1)\n                          ? <button disabled={true} onClick={(e) => this.handleRemove1(e)} className='deleteButtons disabledButtons' >Delete</button>\n                          : <button onClick={(e) => this.handleRemove1(e)} className='deleteButtons' >Delete</button>}\n                      </Col>\n                    </Row>\n                  )\n                }\n                )\n              }\n              <Row>\n                <Col xs={4}><button onClick={(e) => this.addClick1(e)} className='addNewButtons' >Add More</button></Col>\n                <Col xs={8}></Col>\n              </Row>\n            </Col>\n            <Col xs={5} xsOffset={1}>\n              <Row>\n                <Col xs={12}><h2 className='columnFont'>Effective Price</h2></Col>\n              </Row>\n              {\n                this.state.newCosts.map((cost, index) => {\n                  return (\n                    <Row key={index}>\n                      <Col xs={8}><h1 className='calcInput columnFont'>{cost || ('Item' + \" \" + (index + 1))}</h1></Col>\n                      <Col xs={4}></Col>\n                    </Row>\n                  )\n                })\n              }\n            </Col>\n            <Col xs={12}>\n              <Row>\n                <Col xs={6}>\n                  <Col xs={12}><h2 className='columnFont'>Total Discount</h2></Col>\n                  <Col xs={6}><input placeholder='Enter Discount' type=\"text\" value={this.state.discount} name=\"discount\" onChange={this.handleDiscount} className='discountInput' /></Col>\n\n                </Col>\n                <Col xs={5} xsOffset={1}>\n                  <Col xs={12}><h2 className='columnFont'>Total Tax</h2></Col>\n                  <Col xs={6}><input placeholder='Enter Tax' type=\"text\" value={this.state.tax} name=\"tax\" onChange={this.handleTax} className='taxInput' /></Col>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Grid>\n        <div className='footer'>Created by - Faiz Ahmad Khan</div>\n      </div>\n    );\n  }\n}\n\n//<h1>{parseInt(this.state.costs) && parseInt(this.state.costs.map(x => sum1 += parseInt(x))) && parseInt(sum1)}</h1>","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Calculator} from './Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}